package My;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import My.ListNode;
import My.Solution;

//Definition for singly-linked list.
class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

/*
*  Tortoise and Hare Algorithm
If the linked list has a loop they will definitely meet.
Else either of the two references(or their next) will become null.
*/

public class Solution {
	public static boolean hasCycle(ListNode head) {
		if(head == null) return false;
		
		final ListNode first = head;
	   
       List<ListNode> ListNodeList = new ArrayList<ListNode>(){{add(first);}};

       while(true){
    	   if(head.next == null) return false;
    	   else{
    		   head = head.next;
    		   if(ListNodeList.contains(head)) return true;
    		   ListNodeList.add(head); 
    	   }	   
       }
   }
	
	public static boolean hasCycle2(ListNode head) {
		   if(head == null) return false;
		   final ListNode first = head;
		   List<Integer> ListNodeList = new ArrayList<Integer>(){{add(Integer.valueOf(first.val));}};
		   Set<Integer> tmp = new TreeSet<Integer>();

	       while(true){
	    	   if(head.next == null) break;
	    	   else{
	    		   head = head.next;
	    		   ListNodeList.add(head.val); 
	    	   }	   
	       }

	       System.out.println(ListNodeList);
	       for(Integer i:ListNodeList){
	    	   if(tmp.add(i)==false) return false;
	       }
	       
	       return true;
	 }
	
	//unit testing
	public static void main(String[] args){
		List<ListNode> ListNodeList = new ArrayList<ListNode>();
		
		for(int i=0;i<10000;i++){
			ListNodeList.add(new ListNode(i));
		}
		
		for(int i=0;i<ListNodeList.size();i++){
			if(i==ListNodeList.size()-1) ListNodeList.get(i).next = null;
			else ListNodeList.get(i).next = ListNodeList.get(i+1);
		}

		System.out.println("hasCycle:"+Solution.hasCycle2(ListNodeList.get(0)));
		
		ListNodeList.get(9998).next = ListNodeList.get(5);
		
		System.out.println("hasCycle:"+Solution.hasCycle2(ListNodeList.get(0)));

	}
}
